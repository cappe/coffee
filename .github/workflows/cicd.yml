name: CI/CD

on:
  push:
    branches:
      - master

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
      VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
      VAPID_SUBJECT: ${{ secrets.VAPID_SUBJECT }}
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      BUILD_TARGET: prod
      BUILD_TAG: latest

    steps:
      - name: Checkout the sources
        uses: actions/checkout@v1
      - name: Login to private registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
      - name: Build the docker-compose stack
        run: docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.prod.yml build
      - name: Push to registry
        run: docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.prod.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH config
        env:
          DEPLOY_KEY: "${{ secrets.DEPLOY_KEY }}"
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          echo "$DEPLOY_KEY" > ~/.ssh/deploy.key && chmod 0600 ~/.ssh/deploy.key
          cat > ~/.ssh/config <<EOT
          Host production
            User ${{ secrets.DEPLOY_USER }}
            HostName ${{ secrets.DEPLOY_HOST }}
            Port ${{ secrets.DEPLOY_PORT }}
            IdentityFile ~/.ssh/deploy.key
          EOT
      - name: Make sure docker-compose.yml files are up-to-date
        run: |
          ssh -T production <<EOT
          git fetch origin
          git checkout $GITHUB_SHA -- docker-compose.yml docker-compose.prod.yml
          EOT
      - name: Store OVH configuration for Let's Encrypt DNS validation
        run: |
          mkdir -p letsencrypt
          ssh -T production <<EOT
          cat > letsencrypt/ovh.ini <<INI
          dns_ovh_endpoint=ovh-eu
          dns_ovh_application_key=${{ secrets.DNS_OVH_APPLICATION_KEY }}
          dns_ovh_application_secret=${{ secrets.DNS_OVH_APPLICATION_SECRET }}
          dns_ovh_consumer_key=${{ secrets.DNS_OVH_CONSUMER_KEY }}
          INI
          chmod 0600 letsencrypt/ovh.ini
          EOT
      - name: Store production environment for docker-compose
        run: |
          ssh -T production <<EOT
          cat > .env <<ENV
          VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}
          VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_SUBJECT=${{ secrets.VAPID_SUBJECT }}
          DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}
          LETSENCRYPT_DOMAIN=${{ secrets.LETSENCRYPT_DOMAIN }}
          LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
          LETSENCRYPT_SUBDIR=${{ secrets.LETSENCRYPT_SUBDIR }}
          DATABASE_NAME=${{ secrets.DATABASE_NAME }}
          ENV
          chmod 0600 .env
          EOT
      - name: Pull updated images
        run: |
          ssh -T production <<EOT
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull --quiet
          EOT
      - name: Update running containers
        run: |
          ssh -T production <<EOT
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --no-build -d --remove-orphans
          EOT
      - name: Prune all stale images & containers
        run: |
          ssh -T production <<EOT
          docker container prune -f --filter "until=24h"
          docker image prune -f -a --filter "until=24h"
          EOT
      - name: Check docker-compose logs
        run: |
          ssh -T production <<EOT
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs -t
          EOT
