name: CI/CD

on:
  push:
    branches:
      - master-docker-compose

jobs:

  build:
    runs-on: ubuntu-latest
    env:
      VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
      VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      NODE_ENV: production

    steps:
      - name: Checkout the sources
        uses: actions/checkout@v1
      - name: Login to private registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
      - name: Build & start the docker-compose stack
        run: docker-compose -f docker-compose.yml up --build -d
      - name: Check running containers
        run: docker ps -a
      - name: Check logs
        run: docker logs backend-frontend
      - name: Push to registry
        run: docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH config
        env:
          DEPLOY_KEY: "${{ secrets.DEPLOY_KEY }}"
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
          echo "$DEPLOY_KEY" > ~/.ssh/id_rsa && chmod 0600 ~/.ssh/id_rsa
      - name: Pull updated images & update running containers
        run: |
          ssh -tt ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} -p ${{ secrets.DEPLOY_PORT }} <<EOT
            export VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}
            export VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}
            export DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}
            cd ~/src
            git fetch origin
            git checkout $GITHUB_SHA -- docker-compose.yml
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ secrets.DOCKER_REGISTRY }}
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up --no-build -d --remove-orphans
            exit
          EOT
